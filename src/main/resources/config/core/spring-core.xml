<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- scan not @Controller(exclude-filter)-->
	<context:component-scan base-package="com.sunnet" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- JNDI方式配置数据源
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">        
        <property name="jndiName" value="java:comp/env/jdbc/globaltake"/>        
    </bean>
    --> 

	<!-- load jdbc properties-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<array>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</array>
		</property>
	</bean>
	
	<!-- set dataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
      <property name="driverClass"><value>${jdbc.driverClass}</value></property> 
      <property name="jdbcUrl"><value>${jdbc.jdbcUrl}</value></property>             
      <property name="user"><value>${jdbc.user}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
	</bean> 
	
	<!-- set sessionFactory -->
	<bean id="sessionFactory"  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy"/>
		</property>
		<property name="packagesToScan" value="com.sunnet.org.*.model"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${jdbc.dialect}
				</prop>
			<!-- 	<prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<!-- 开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<!-- 配置Hibernate.cfg.xml开启二级缓存。 			 net.sf.ehcache.hibernate-->
				<!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->
				<!--&lt;!&ndash; 配置二级缓存的供应商 &ndash;&gt;-->
				<!--<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>-->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<!-- <prop key="hibernate.connection.release_mode">after_statement</prop> -->
				<!--<prop key="show_sql">50</prop>-->
			</props>
		</property>
	</bean>
	
	<!-- set  transactionManager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 配置事务的传播特性 --> 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--添加 -->
			<tx:method name="add*"      propagation="REQUIRED"/>
			<tx:method name="create*"   propagation="REQUIRED"/>
			<tx:method name="save*"     propagation="REQUIRED"/>
			<!--修改 -->
			<tx:method name="edit*"     propagation="REQUIRED"/>
			<tx:method name="modify*"   propagation="REQUIRED"/>
			<tx:method name="update*"   propagation="REQUIRED"/>
			<!--删除 -->
			<tx:method name="delete*"   propagation="REQUIRED"/>
			<tx:method name="remove*"   propagation="REQUIRED"/>
			<!--同步 -->
			<tx:method name="synchro*"  propagation="REQUIRED"/>
			<!--处理 -->
			<tx:method name="handle*"   propagation="REQUIRED"/>
			<!--查看 -->
			<tx:method name="view*"     propagation="REQUIRED"/>
			<!--查找 -->
			<tx:method name="search*"   propagation="SUPPORTS" read-only="true"/>
			<tx:method name="query*"    propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*"     propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*"      propagation="SUPPORTS" read-only="true"/>
			<tx:method name="load*"     propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*"         propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!--<tx:advice id="txAdviceController" transaction-manager="transactionManager">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="recovery"   propagation="SUPPORTS" read-only="true"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->
	
	<aop:aspectj-autoproxy />
	<bean class="com.sunnet.framework.interceptor.Loggers"/>
	
	<!--哪些类的哪些方法参与事务 --> 
	<aop:config>
		<!-- 定义切点 -->
		<aop:pointcut id="pointcutId" expression="execution(* *..service.impl*..*(..))" />
		<!-- 定义通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcutId" />
	</aop:config>

	<!--<aop:config>-->
		<!--&lt;!&ndash; 定义切点 &ndash;&gt;-->
		<!--<aop:pointcut id="controllercutId" expression="execution(* com.sunnet.org.app.AppTb_docController(..))" />-->
		<!--&lt;!&ndash; 定义通知 &ndash;&gt;-->
		<!--<aop:advisor advice-ref="txAdviceController" pointcut-ref="controllercutId" />-->
	<!--</aop:config>-->

</beans>
